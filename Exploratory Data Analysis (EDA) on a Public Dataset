import pandas as pd
import numpy as np
from sklearn.datasets import load_iris
import matplotlib.pyplot as plt
import seaborn as sns

# Load the iris dataset
iris = load_iris()
df = pd.DataFrame(data=np.c_[iris['data'], iris['target']], 
                 columns=iris['feature_names'] + ['target'])

# Basic data cleaning and preparation
# Convert target numbers to species names for better readability
species_names = {0: 'setosa', 1: 'versicolor', 2: 'virginica'}
df['species'] = df['target'].map(species_names)
df = df.drop('target', axis=1)

# Check for missing values
print("Missing values in dataset:")
print(df.isnull().sum())

# Basic statistical analysis
print("\nBasic statistical summary:")
print(df.describe())

# Create visualizations
plt.style.use('seaborn')
fig = plt.figure(figsize=(15, 10))

# 1. Distribution plots for each feature
plt.subplot(2, 2, 1)
for feature in iris['feature_names']:
    sns.kdeplot(data=df, x=feature, label=feature)
plt.title('Distribution of Iris Features')
plt.legend()

# 2. Box plots for each feature by species
plt.subplot(2, 2, 2)
df_melted = df.melt(id_vars=['species'], 
                    value_vars=[col for col in df.columns if col != 'species'])
sns.boxplot(data=df_melted, x='variable', y='value', hue='species')
plt.title('Feature Distribution by Species')
plt.xticks(rotation=45)

# 3. Correlation heatmap
plt.subplot(2, 2, 3)
correlation_matrix = df.drop('species', axis=1).corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)
plt.title('Correlation Heatmap')

# 4. Scatter plot matrix for the most correlated features
plt.subplot(2, 2, 4)
sns.scatterplot(data=df, x='petal length (cm)', y='petal width (cm)', 
                hue='species', style='species')
plt.title('Petal Length vs Width by Species')

plt.tight_layout()
plt.show()

# Calculate additional statistics by species
print("\nMean values by species:")
print(df.groupby('species').mean())

# Calculate correlations
print("\nFeature correlations:")
print(correlation_matrix)

# Identify the strongest correlations
correlations = correlation_matrix.unstack()
sorted_correlations = correlations.sort_values(key=abs, ascending=False)
print("\nStrongest correlations (excluding self-correlations):")
print(sorted_correlations[sorted_correlations != 1.0][:2]) 
